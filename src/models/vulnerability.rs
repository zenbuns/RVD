// src/models/vulnerability.rs

use chrono::NaiveDate;
use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Vulnerability {
	pub vulnerability_id: Option<i64>,
	pub cve_id: String,
	pub description: Option<String>,
	pub severity: String,
	pub impact: Option<String>,
	pub mitigation: Option<String>,
	pub published_date: Option<NaiveDate>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct VulnerabilityDetails {
	pub vulnerability: Vulnerability,
	pub affected_software: Vec<super::software::AffectedSoftware>,
	pub software_info: Vec<(super::software::SoftwareProduct, super::software::SoftwareVersion)>,
}

impl Vulnerability {
	pub fn new(cve_id: String, severity: String) -> Self {
		Self {
			vulnerability_id: None,
			cve_id,
			description: None,
			severity,
			impact: None,
			mitigation: None,
			published_date: None,
		}
	}
}